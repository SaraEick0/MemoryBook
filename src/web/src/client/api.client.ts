/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { BaseClient } from './api.client.base'

export class Client extends BaseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param memoryBookUniverseId (optional) 
     * @param body (optional) 
     * @return Success
     */
    createGroups(memoryBookUniverseId: string | undefined, body: GroupCreateModel[] | null | undefined): Promise<MemoryBookResponseModel> {
        let url_ = this.baseUrl + "/api/GroupCommand/CreateGroups?";
        if (memoryBookUniverseId === null)
            throw new Error("The parameter 'memoryBookUniverseId' cannot be null.");
        else if (memoryBookUniverseId !== undefined)
            url_ += "memoryBookUniverseId=" + encodeURIComponent("" + memoryBookUniverseId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateGroups(_response));
        });
    }

    protected processCreateGroups(response: Response): Promise<MemoryBookResponseModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MemoryBookResponseModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemoryBookResponseModel>(<any>null);
    }

    /**
     * @param memoryBookUniverseId (optional) 
     * @return Success
     */
    getAllGroups(memoryBookUniverseId: string | undefined): Promise<GroupReadModel[]> {
        let url_ = this.baseUrl + "/api/GroupQuery/GetAllGroups?";
        if (memoryBookUniverseId === null)
            throw new Error("The parameter 'memoryBookUniverseId' cannot be null.");
        else if (memoryBookUniverseId !== undefined)
            url_ += "memoryBookUniverseId=" + encodeURIComponent("" + memoryBookUniverseId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllGroups(_response));
        });
    }

    protected processGetAllGroups(response: Response): Promise<GroupReadModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupReadModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GroupReadModel[]>(<any>null);
    }

    /**
     * @param memoryBookUniverseId (optional) 
     * @param groupId (optional) 
     * @return Success
     */
    getGroupById(memoryBookUniverseId: string | undefined, groupId: string | undefined): Promise<GroupViewModel> {
        let url_ = this.baseUrl + "/api/GroupQuery/GetGroupById?";
        if (memoryBookUniverseId === null)
            throw new Error("The parameter 'memoryBookUniverseId' cannot be null.");
        else if (memoryBookUniverseId !== undefined)
            url_ += "memoryBookUniverseId=" + encodeURIComponent("" + memoryBookUniverseId) + "&"; 
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetGroupById(_response));
        });
    }

    protected processGetGroupById(response: Response): Promise<GroupViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GroupViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GroupViewModel>(<any>null);
    }

    /**
     * @param memoryBookName (optional) 
     * @return Success
     */
    createMemoryBookUniverse(memoryBookName: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/MemoryBookUniverseCommand/CreateMemoryBookUniverse?";
        if (memoryBookName !== undefined)
            url_ += "memoryBookName=" + encodeURIComponent("" + memoryBookName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateMemoryBookUniverse(_response));
        });
    }

    protected processCreateMemoryBookUniverse(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMemoryBookUniverses(): Promise<MemoryBookUniverseReadModel[]> {
        let url_ = this.baseUrl + "/api/MemoryBookUniverseQuery/GetAllMemoryBookUniverses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllMemoryBookUniverses(_response));
        });
    }

    protected processGetAllMemoryBookUniverses(response: Response): Promise<MemoryBookUniverseReadModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemoryBookUniverseReadModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemoryBookUniverseReadModel[]>(<any>null);
    }

    /**
     * @param memoryBookUniverseIds (optional) 
     * @return Success
     */
    getMemoryBookUniversesById(memoryBookUniverseIds: string[] | null | undefined): Promise<MemoryBookUniverseReadModel[]> {
        let url_ = this.baseUrl + "/api/MemoryBookUniverseQuery/GetMemoryBookUniversesById?";
        if (memoryBookUniverseIds !== undefined)
            memoryBookUniverseIds && memoryBookUniverseIds.forEach(item => { url_ += "memoryBookUniverseIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMemoryBookUniversesById(_response));
        });
    }

    protected processGetMemoryBookUniversesById(response: Response): Promise<MemoryBookUniverseReadModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemoryBookUniverseReadModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemoryBookUniverseReadModel[]>(<any>null);
    }

    /**
     * @param memoryBookNames (optional) 
     * @return Success
     */
    getMemoryBookUniversesByName(memoryBookNames: string[] | null | undefined): Promise<MemoryBookUniverseReadModel[]> {
        let url_ = this.baseUrl + "/api/MemoryBookUniverseQuery/GetMemoryBookUniversesByName?";
        if (memoryBookNames !== undefined)
            memoryBookNames && memoryBookNames.forEach(item => { url_ += "memoryBookNames=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMemoryBookUniversesByName(_response));
        });
    }

    protected processGetMemoryBookUniversesByName(response: Response): Promise<MemoryBookUniverseReadModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MemoryBookUniverseReadModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MemoryBookUniverseReadModel[]>(<any>null);
    }
}

export class GroupCreateModel implements IGroupCreateModel {
    name?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;

    constructor(data?: IGroupCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GroupCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new GroupCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        return data; 
    }
}

export interface IGroupCreateModel {
    name?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;
}

export class MemoryBookResponseModel implements IMemoryBookResponseModel {
    readonly success?: boolean;
    errors?: string[] | undefined;
    ids?: string[] | undefined;

    constructor(data?: IMemoryBookResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).success = _data["success"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): MemoryBookResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemoryBookResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IMemoryBookResponseModel {
    success?: boolean;
    errors?: string[] | undefined;
    ids?: string[] | undefined;
}

export class GroupReadModel implements IGroupReadModel {
    id?: string;
    memberIds?: string[] | undefined;
    detailIds?: string[] | undefined;
    name?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;

    constructor(data?: IGroupReadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["memberIds"])) {
                this.memberIds = [] as any;
                for (let item of _data["memberIds"])
                    this.memberIds!.push(item);
            }
            if (Array.isArray(_data["detailIds"])) {
                this.detailIds = [] as any;
                for (let item of _data["detailIds"])
                    this.detailIds!.push(item);
            }
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GroupReadModel {
        data = typeof data === 'object' ? data : {};
        let result = new GroupReadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.memberIds)) {
            data["memberIds"] = [];
            for (let item of this.memberIds)
                data["memberIds"].push(item);
        }
        if (Array.isArray(this.detailIds)) {
            data["detailIds"] = [];
            for (let item of this.detailIds)
                data["detailIds"].push(item);
        }
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        return data; 
    }
}

export interface IGroupReadModel {
    id?: string;
    memberIds?: string[] | undefined;
    detailIds?: string[] | undefined;
    name?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;
}

export type DetailTypeEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;

export class DetailViewModel implements IDetailViewModel {
    detailTypeText?: string | undefined;
    detailType?: DetailTypeEnum;
    detailTypeStartText?: string | undefined;
    detailTypeEndText?: string | undefined;
    story?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;

    constructor(data?: IDetailViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.detailTypeText = _data["detailTypeText"];
            this.detailType = _data["detailType"];
            this.detailTypeStartText = _data["detailTypeStartText"];
            this.detailTypeEndText = _data["detailTypeEndText"];
            this.story = _data["story"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DetailViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DetailViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["detailTypeText"] = this.detailTypeText;
        data["detailType"] = this.detailType;
        data["detailTypeStartText"] = this.detailTypeStartText;
        data["detailTypeEndText"] = this.detailTypeEndText;
        data["story"] = this.story;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDetailViewModel {
    detailTypeText?: string | undefined;
    detailType?: DetailTypeEnum;
    detailTypeStartText?: string | undefined;
    detailTypeEndText?: string | undefined;
    story?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}

export type RelationshipTypeEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;

export class RelationshipViewModel implements IRelationshipViewModel {
    firstMemberName?: string | undefined;
    firstMemberId?: string;
    firstMemberRelationshipType?: RelationshipTypeEnum;
    secondMemberName?: string | undefined;
    secondMemberId?: string;
    secondMemberRelationshipType?: RelationshipTypeEnum;
    details?: DetailViewModel[] | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;

    constructor(data?: IRelationshipViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstMemberName = _data["firstMemberName"];
            this.firstMemberId = _data["firstMemberId"];
            this.firstMemberRelationshipType = _data["firstMemberRelationshipType"];
            this.secondMemberName = _data["secondMemberName"];
            this.secondMemberId = _data["secondMemberId"];
            this.secondMemberRelationshipType = _data["secondMemberRelationshipType"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(DetailViewModel.fromJS(item));
            }
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RelationshipViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RelationshipViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstMemberName"] = this.firstMemberName;
        data["firstMemberId"] = this.firstMemberId;
        data["firstMemberRelationshipType"] = this.firstMemberRelationshipType;
        data["secondMemberName"] = this.secondMemberName;
        data["secondMemberId"] = this.secondMemberId;
        data["secondMemberRelationshipType"] = this.secondMemberRelationshipType;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRelationshipViewModel {
    firstMemberName?: string | undefined;
    firstMemberId?: string;
    firstMemberRelationshipType?: RelationshipTypeEnum;
    secondMemberName?: string | undefined;
    secondMemberId?: string;
    secondMemberRelationshipType?: RelationshipTypeEnum;
    details?: DetailViewModel[] | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}

export class MemberViewModel implements IMemberViewModel {
    id?: string;
    fullName?: string | undefined;
    commonName?: string | undefined;
    details?: DetailViewModel[] | undefined;
    relationships?: RelationshipViewModel[] | undefined;

    constructor(data?: IMemberViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.commonName = _data["commonName"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(DetailViewModel.fromJS(item));
            }
            if (Array.isArray(_data["relationships"])) {
                this.relationships = [] as any;
                for (let item of _data["relationships"])
                    this.relationships!.push(RelationshipViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MemberViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["commonName"] = this.commonName;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        if (Array.isArray(this.relationships)) {
            data["relationships"] = [];
            for (let item of this.relationships)
                data["relationships"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMemberViewModel {
    id?: string;
    fullName?: string | undefined;
    commonName?: string | undefined;
    details?: DetailViewModel[] | undefined;
    relationships?: RelationshipViewModel[] | undefined;
}

export class GroupViewModel implements IGroupViewModel {
    groupName?: string | undefined;
    groupDescription?: string | undefined;
    members?: MemberViewModel[] | undefined;
    details?: DetailViewModel[] | undefined;

    constructor(data?: IGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupName = _data["groupName"];
            this.groupDescription = _data["groupDescription"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(MemberViewModel.fromJS(item));
            }
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(DetailViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupName"] = this.groupName;
        data["groupDescription"] = this.groupDescription;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGroupViewModel {
    groupName?: string | undefined;
    groupDescription?: string | undefined;
    members?: MemberViewModel[] | undefined;
    details?: DetailViewModel[] | undefined;
}

export class MemoryBookUniverseReadModel implements IMemoryBookUniverseReadModel {
    id?: string;
    createdDate?: Date;
    name?: string | undefined;

    constructor(data?: IMemoryBookUniverseReadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): MemoryBookUniverseReadModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemoryBookUniverseReadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["name"] = this.name;
        return data; 
    }
}

export interface IMemoryBookUniverseReadModel {
    id?: string;
    createdDate?: Date;
    name?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}