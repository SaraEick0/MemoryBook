// <auto-generated />
using System;
using MemoryBook.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemoryBook.StorageInitializer.Migrations
{
    [DbContext(typeof(MemoryBookDbContext))]
    [Migration("20200330160655_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("MemoryBook")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Detail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomDetailText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DetailTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Story")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DetailTypeId");

                    b.HasIndex("GroupId");

                    b.ToTable("Detail");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.DetailAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RelationshipId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("DetailAssociation");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.DetailPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<Guid>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("MemberId");

                    b.ToTable("DetailPermission");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.DetailType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DetailEndText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailStartText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DetailType");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemoryBookUniverseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("MemoryBookUniverseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Group");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.GroupMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupMembership");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("CommonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<Guid>("MemoryBookUniverseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CommonName")
                        .IsUnique()
                        .HasFilter("[CommonName] IS NOT NULL");

                    b.HasIndex("MemoryBookUniverseId");

                    b.HasIndex("FirstName", "MiddleName", "LastName")
                        .IsUnique()
                        .HasFilter("[MiddleName] IS NOT NULL");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.MemoryBookUniverse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MemoryBookUniverses");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemoryBookUniverseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemoryBookUniverseId");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.RelationshipMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberRelationshipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberRelationshipTypeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("RelationshipMembership");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.RelationshipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("RelationshipType");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Detail", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.Member", "Creator")
                        .WithMany("CreatedDetails")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.DetailType", "DetailType")
                        .WithMany("Details")
                        .HasForeignKey("DetailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.Group", null)
                        .WithMany("Details")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.DetailAssociation", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.Detail", "Detail")
                        .WithMany("DetailAssociations")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.EntityType", "EntityType")
                        .WithMany("DetailAssociations")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.Group", null)
                        .WithMany("DetailAssociations")
                        .HasForeignKey("GroupId");

                    b.HasOne("MemoryBook.DataAccess.Entities.Member", null)
                        .WithMany("DetailAssociations")
                        .HasForeignKey("MemberId");

                    b.HasOne("MemoryBook.DataAccess.Entities.Relationship", null)
                        .WithMany("DetailAssociations")
                        .HasForeignKey("RelationshipId");
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.DetailPermission", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.Detail", "Detail")
                        .WithMany("Permissions")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.Member", "Member")
                        .WithMany("Permissions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Group", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.MemoryBookUniverse", "MemoryBookUniverse")
                        .WithMany("Groups")
                        .HasForeignKey("MemoryBookUniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.GroupMembership", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.Group", "Group")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.Member", "Member")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Member", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.MemoryBookUniverse", "MemoryBookUniverse")
                        .WithMany("Members")
                        .HasForeignKey("MemoryBookUniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.Relationship", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.MemoryBookUniverse", "MemoryBookUniverse")
                        .WithMany("Relationships")
                        .HasForeignKey("MemoryBookUniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryBook.DataAccess.Entities.RelationshipMembership", b =>
                {
                    b.HasOne("MemoryBook.DataAccess.Entities.Member", "Member")
                        .WithMany("RelationshipMemberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.RelationshipType", "MemberRelationshipType")
                        .WithMany("RelationshipMemberships")
                        .HasForeignKey("MemberRelationshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryBook.DataAccess.Entities.Relationship", "Relationship")
                        .WithMany("RelationshipMemberships")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
